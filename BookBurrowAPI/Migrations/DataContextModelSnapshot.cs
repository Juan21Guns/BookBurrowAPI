// <auto-generated />
using System;
using BookBurrowAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookBurrowAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookBurrowAPI.Models.Books", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BookISBN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BookImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookBurrowAPI.Models.FriendsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FriendStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("User1UserId")
                        .HasColumnType("int");

                    b.Property<int>("User2UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User1UserId");

                    b.HasIndex("User2UserId");

                    b.ToTable("FriendsLists");
                });

            modelBuilder.Entity("BookBurrowAPI.Models.Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BookBurrowAPI.Models.PGUserNames", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("PGUserNames");
                });

            modelBuilder.Entity("BookBurrowAPI.Models.PrivateGroup", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookChapter")
                        .HasColumnType("int");

                    b.HasKey("ChatId");

                    b.ToTable("PrivateGroups");
                });

            modelBuilder.Entity("BookBurrowAPI.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookBurrowAPI.Models.FriendsList", b =>
                {
                    b.HasOne("BookBurrowAPI.Models.Users", "User1")
                        .WithMany()
                        .HasForeignKey("User1UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookBurrowAPI.Models.Users", "User2")
                        .WithMany()
                        .HasForeignKey("User2UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("BookBurrowAPI.Models.Messages", b =>
                {
                    b.HasOne("BookBurrowAPI.Models.PrivateGroup", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookBurrowAPI.Models.Users", "UserSent")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("UserSent");
                });

            modelBuilder.Entity("BookBurrowAPI.Models.PGUserNames", b =>
                {
                    b.HasOne("BookBurrowAPI.Models.PrivateGroup", "Chat")
                        .WithMany("Chats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookBurrowAPI.Models.Users", "User")
                        .WithMany("UserNames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookBurrowAPI.Models.PrivateGroup", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BookBurrowAPI.Models.Users", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserNames");
                });
#pragma warning restore 612, 618
        }
    }
}
